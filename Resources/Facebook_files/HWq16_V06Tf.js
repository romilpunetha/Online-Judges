/*!CK:2332838800!*//*1447774651,*/

if (self.CavalryLogger) { CavalryLogger.start_js(["GMQG5"]); }

__d('ShareDialogInput.react', ['cx', 'DOM', 'React', 'ReactDOM', 'ShareDialogDataSources', 'ShareDialogAudienceTypes', 'MentionsInput.react', 'XUITypeaheadView.react', 'DraftEntity', 'EditorState', 'createEditorStateWithEntities', 'getMentionsTextForContentState', 'getMentionsInputDecorator', 'fbt', 'joinClasses'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v) { if (c.__markCompiled) c.__markCompiled(); var w = j.PropTypes, x = j.createClass({ displayName: 'ShareDialogInput', propTypes: { activeAudience: function (y) { if (!m.isValid(y.activeAudience)) return new Error('The active audience is invalid.'); }, dataSources: w.instanceOf(l), legacyInput: w.any, initInputText: w.string, initInputRanges: w.array, placeholderText: w.string }, getInitialState: function () { return { editorState: this.createEditorState(), dataSource: this.props.dataSources.getSource(l.TYPES.MENTIONS) }; }, createEditorState: function () { var y = this.props.initInputText, z = this.props.initInputRanges; if (y) return r({ text: y, ranges: z, decorator: t(), entityCreationFn: function (aa) { return p.create('MENTION', 'IMMUTABLE', { id: aa.id, isWeak: aa.weakreference }); } }); return q.createEmpty(t()); }, componentWillReceiveProps: function (y) { if (y.activeAudience === m.MESSAGE) { this.setState({ dataSource: null }); } else this.setState({ dataSource: this.props.dataSources.getSource(l.TYPES.MENTIONS) }); }, componentDidMount: function () { if (this.props.legacyInput) { var y = k.findDOMNode(this.refs.inputContainer); i.setContent(y, this.props.legacyInput); } }, onChange: function (y) { this.setState({ editorState: y }); }, onBlur: function () { var y = this.state.editorState.getCurrentContent(), z = s(y); if (this.props.onBlur) this.props.onBlur(z); }, render: function () { var y = this.props.placeholderText || u._("Say something about this..."); if (this.props.legacyInput) { return j.createElement('div', { ref: 'inputContainer' }); } else return (j.createElement(n, { mentionsSource: this.state.dataSource, className: v(this.props.className, "_3s-5"), editorState: this.state.editorState, typeaheadView: o, placeholder: y, selectOnTab: false, spellCheck: true, onBlur: this.onBlur, onChange: this.onChange })); } }); f.exports = x; }, null);
__d('ShareDialogTaggerTypes', ['getObjectValues'], function a(b, c, d, e, f, g, h) { if (c.__markCompiled) c.__markCompiled(); var i = { NONE: 'none', PEOPLE: 'people', PLACE: 'place', DOING: 'doing', FEELING: 'feeling' }, j = h(i); f.exports = i; f.exports.ALL = j; f.exports.isValid = function (k) { return j.some(function (l) { return l === k; }); }; }, null);
__d('DialogExpansionAtWidth', ['DialogExpansion'], function a(b, c, d, e, f, g, h) { if (c.__markCompiled) c.__markCompiled(); var i, j; i = babelHelpers.inherits(k, h); j = i && i.prototype; k.prototype._getWidth = function () { 'use strict'; return this._dialog.getWidth(); }; function k() { 'use strict'; i.apply(this, arguments); } f.exports = k; }, null);
__d('ShareDialogTaggerButtons.react', ['React', 'ShareDialogDataSources', 'ShareDialogTaggerTypes', 'TooltipLink.react', 'cx', 'fbt', 'emptyFunction'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n) { if (c.__markCompiled) c.__markCompiled(); var o = h.PropTypes, p = h.createClass({ displayName: 'ShareDialogTaggerButtons', propTypes: { activeTagger: function (q) { if (!j.isValid(q.activeTagger)) return new Error('The active tagger is invalid.'); }, dataSources: o.instanceOf(i), hasPeople: o.bool, hasPlace: o.bool, hasDoing: o.bool, onTaggerClick: o.func }, getDefaultProps: function () { return { activeTagger: j.NONE, onTaggerClick: n }; }, getInitialState: function () { return { activeTagger: this.props.activeTagger, dataSources: this.props.dataSources }; }, componentWillReceiveProps: function (q) { this.setState({ activeTagger: q.activeTagger, dataSources: q.dataSources }); }, _taggerClick: function (q) { var r = q; if (this.state.activeTagger === q) r = j.NONE; this.setState({ activeTagger: r }); this.props.onTaggerClick(r); }, _onPeopleTaggerClick: function () { this._taggerClick(j.PEOPLE); }, _onPlaceTaggerClick: function () { this._taggerClick(j.PLACE); }, _onOpenGraphTaggerClick: function () { this._taggerClick(j.DOING); }, render: function () { var q = this.state.dataSources, r = null, s = null, t = null, u = null; if (!q) return null; var v = m._("Add what you're doing or how you're feeling"); if (q.getSource(i.TYPES.PERSON)) r = h.createElement(k, { onClick: this._onPeopleTaggerClick, tooltip: m._("Tag people in your post"), className: "_2pjs" + (' ' + "_jku") + (this.props.hasPeople ? ' ' + "_jkv" : '') + (this.state.activeTagger === j.PEOPLE ? ' ' + "_jkw" : '') }, h.createElement('span', { className: "_jkx" }, m._("Tag people"))); if (q.getSource(i.TYPES.PLACE)) s = h.createElement(k, { onClick: this._onPlaceTaggerClick, tooltip: m._("Add a location to your post"), className: "_2pjs" + (' ' + "_jky") + (this.props.hasPlace ? ' ' + "_jkv" : '') + (this.state.activeTagger === j.PLACE ? ' ' + "_jkw" : '') }, h.createElement('span', { className: "_jkx" }, m._("Tag a location"))); if (q.getSource(i.TYPES.ACTION) && q.getSource(i.TYPES.OBJECT)) t = h.createElement(k, { ref: 'doingButton', onClick: this._onOpenGraphTaggerClick, tooltip: v, className: "_2pjs" + (' ' + "_34fh") + (this.props.hasDoing ? ' ' + "_jkv" : '') + (this.state.activeTagger === j.DOING ? ' ' + "_jkw" : '') }, h.createElement('span', { className: "_jkx" }, v)); if (!r && !s && !t) return null; return (h.createElement('div', { className: "_5fj8" }, r, s, t)); } }); f.exports = p; }, null);
__d('ShareDialogFooter.react', ['DOM', 'LeftRight.react', 'React', 'ReactDOM', 'ShareDialogAudience.react', 'ShareDialogDataSources', 'ShareDialogStatusTypes', 'ShareDialogTaggerButtons.react', 'ShareDialogTaggerTypes', 'ShareNowCounter', 'ShareNowCounterEvent', 'SharerType', 'PrivacySelector', 'XUIDialogFooter.react', 'XUIDialogCancelButton.react', 'XUIDialogCloseButton.react', 'XUIDialogButton.react', 'XUIButton.react', 'cx', 'emptyFunction', 'fbt', 'Image.react', 'ix', 'InlineBlock.react', 'Tooltip'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, aa, ba, ca, da, ea, fa) { if (c.__markCompiled) c.__markCompiled(); var ga = l.TYPES, ha = j.PropTypes, ia = j.createClass({ displayName: 'ShareDialogFooter', propTypes: { activeAudience: function (ja) { if (!ga.isValid(ja.activeAudience)) return new Error('The active audience is invalid.'); }, activeTagger: function (ja) { if (!p.isValid(ja.activeTagger)) return new Error('The active tagger is invalid.'); }, status: ha.shape({ type: ha.string.isRequired, title: ha.oneOfType([ha.string, ha.object]), message: ha.oneOfType([ha.string, ha.object]) }).isRequired, audienceTargets: ha.array, dataSources: ha.instanceOf(m), experiments: ha.shape({ postRetry: ha.bool }), hasDoing: ha.bool, hasPeople: ha.bool, hasPlace: ha.bool, onCancel: ha.func, onPost: ha.func, onRetry: ha.func, onPrivacyChange: ha.func, onTaggerClick: ha.func, privacySelector: ha.any, showDoingNUX: ha.bool, renderInline: ha.bool }, getDefaultProps: function () { return { experiments: { postRetry: false }, onCancel: aa, onPost: aa, onRetry: aa, onTaggerClick: aa, status: { type: n.COMPOSING }, renderInline: false }; }, _layerHack: function () { if (this.refs && this.refs.privacySelector) { h.setContent(k.findDOMNode(this.refs.privacySelector), this.props.privacySelector); } else setTimeout(this._layerHack, 100); }, componentDidMount: function () { if (this.props.activeAudience === ga.OWN) this._layerHack(); }, componentWillReceiveProps: function (ja) { if (this.props.activeAudience !== ja.activeAudience && ja.activeAudience === ga.OWN) this._layerHack(); if (this.props.status.type === n.ERROR && ja.status.type === n.COMPOSING) this._layerHack(); }, componentDidUpdate: function (ja, ka) { if (this.props.activeAudience === ga.OWN) this._layerHack(); }, getPrivacyValue: function () { var ja = t.getAdamaSelectorInstance(this.props.privacySelector); if (ja) { var ka = ja.getPostParam(); if (!ka) q.logEvent(r.NO_PRIVACY_VALUE_ADAMA); return ka; } var la = h.scry(this.props.privacySelector, 'select option[selected="1"]').pop(); if (la && la.value) { return la.value; } else q.logEvent(r.NO_PRIVACY_VALUE); return null; }, render: function () { if (this.props.status.type === n.SUCCESS) { return this.props.status.title ? j.createElement(u, { className: "_8js" }, j.createElement('div', { className: "_4-88" }, j.createElement(w, { use: 'confirm' }))) : j.createElement('noscript', null); } else if (this.props.status.type === n.ERROR) { var ja = j.createElement('noscript', null); if (this.props.experiments.postRetry) ja = j.createElement(x, { label: ba._("Retry"), onClick: this.props.onRetry }); return this.props.renderInline ? j.createElement('noscript', null) : j.createElement(u, { className: "_8js" }, j.createElement('div', { className: "_4-88" }, ja, j.createElement(w, { use: 'confirm' }))); } var ka = this.props.status.type === n.POSTING, la = this.props.activeAudience, ma = this.props.sharerType, na; if (la === ga.OWN && ma !== s.PAGE_VIEWER) na = j.createElement('div', { ref: 'privacySelector', className: "_8ju" }); var oa; if (la == ga.GROUP && ma !== s.PAGE_VIEWER) { var pa = ba._("People who can see posts in the group"); oa = j.createElement(ea, babelHelpers._extends({ className: "_43k3" }, fa.propsFor(pa)), j.createElement(ca, { src: da('/images/litestand/audience/group.png') })); } var qa; if (!ka) qa = j.createElement('div', null, na, oa); var ra; if (ka) { ra = la === ga.MESSAGE ? ba._("Sending") : ba._("Posting"); } else ra = la === ga.MESSAGE ? ba._("Send") : ba._("Post"); var sa = la !== ga.OWN && !this.props.audienceTargets, ta = la === ga.OWN || la === ga.PERSON || la === ga.PAGE ? j.createElement(o, { activeTagger: this.props.activeTagger, hasPeople: this.props.hasPeople, hasPlace: this.props.hasPlace, hasDoing: this.props.hasDoing, onTaggerClick: this.props.onTaggerClick, dataSources: this.props.dataSources, showDoingNUX: this.props.showDoingNUX }) : j.createElement('noscript', null); if (this.props.renderInline) { return (j.createElement('div', { className: "_8js" }, j.createElement(i, null, ka ? j.createElement('noscript', null) : ta, j.createElement(i, null, qa, j.createElement('div', { className: "_4-88" }, j.createElement(y, { label: ra, disabled: ka || sa, type: 'button', use: 'confirm', onClick: this.props.onPost })))))); } else return (j.createElement(u, { className: "_8js", leftContent: ka ? j.createElement('noscript', null) : ta }, j.createElement(i, null, qa, j.createElement('div', { className: "_4-88" }, j.createElement(v, { disabled: ka, action: 'cancel', onClick: this.props.onCancel }), j.createElement(x, { label: ra, disabled: ka || sa, use: 'confirm', onClick: this.props.onPost }))))); } }); f.exports = ia; }, null);
__d('ShareDialogMetricMixin', ['BanzaiScuba', 'ReactDOM', 'Vector'], function a(b, c, d, e, f, g, h, i, j) { if (c.__markCompiled) c.__markCompiled(); var k = null, l = null, m = null, n = { _logHeights: function (event, o, p, q) { var r = j.getViewportDimensions(), s = new h('osric_dimensions'); s.addNormal('fbid', o); s.addNormal('event', event); s.addInteger('viewport_height', r.y); s.addInteger('screen_height', window.screen.height); if (p && i.findDOMNode(p)) { var t = j.getElementDimensions(i.findDOMNode(p)); s.addInteger('dialog_height', t.y); } if (q && i.findDOMNode(q)) { var u = j.getElementDimensions(i.findDOMNode(q)); s.addInteger('attachment_height', u.y); } s.post(); }, logLoadHeights: function () { this._logHeights('load', this.props.postId, this.refs.dialog, this.refs.attachment); }, logPostHeights: function () { this._logHeights('post', this.props.postId, this.refs.dialog, this.refs.attachment); }, logCancelHeights: function () { this._logHeights('cancel', this.props.postId, this.refs.dialog, this.refs.attachment); } }; f.exports = n; }, null);
__d('ShareDialogTitle.react', ['ShareDialogAudienceSelector.react', 'ShareDialogAudienceText.react', 'ShareDialogAudienceTypes', 'ShareDialogDataSources', 'ShareDialogStatusTypes', 'SharerType', 'React', 'LeftRight.react', 'XUICloseButton.react', 'XUIDialogTitle.react', 'cx', 'emptyFunction', 'fbt'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) { if (c.__markCompiled) c.__markCompiled(); var u = k.TYPES, v = n.PropTypes, w = n.createClass({ displayName: 'ShareDialogTitle', propTypes: { activeAudience: function (x) { if (!j.isValid(x.activeAudience)) return new Error('The active audience is invalid.'); }, status: v.shape({ type: v.string.isRequired, title: v.oneOfType([v.string, v.object]), message: v.oneOfType([v.string, v.object]) }).isRequired, dataSources: v.instanceOf(k), onAudienceSelect: v.func, onClose: v.func, renderInline: v.bool }, getDefaultProps: function () { return { onAudienceSelect: s, onClose: s, status: { type: 'composing' }, renderInline: false }; }, render: function () { var x = this.props.dataSources, y = this.props.activeAudience, z = []; if (this.props.sharerType === m.MESSAGE_ONLY) { z.push(j.MESSAGE); } else if (this.props.sharerType === m.PAGE_ONLY) { z.push(j.PAGE); } else if (this.props.sharerType === m.PAGE_VIEWER) { z.push(j.OWN); } else { z.push(j.OWN); if (x.getSource(u.PERSON_WALL)) z.push(j.PERSON); if (x.getSource(u.GROUP)) z.push(j.GROUP); if (x.getSource(u.PAGE)) z.push(j.PAGE); if (x.getSource(u.MESSAGE)) z.push(j.MESSAGE); } var aa; if (this.props.status.type === l.COMPOSING) { aa = n.createElement('div', { className: "_1jlx" }, n.createElement(h, { allowedAudiences: z, activeAudience: y, onAudienceSelect: this.props.onAudienceSelect })); } else if (this.props.status.type === l.POSTING) { aa = n.createElement(i, { className: "_4zt0", audience: y }); } else if (this.props.status.type === l.ERROR) { aa = n.createElement('span', { className: "_4zt0" }, this.props.status.title || t._("We're Sorry")); } else if (this.props.status.type === l.SUCCESS) aa = this.props.status.title ? n.createElement('span', { className: "_4zt0" }, this.props.status.title) : null; if (!aa) return n.createElement('noscript', null); var ba = n.createElement(p, { className: "_51-t _3chm", label: t._("Close"), onClick: this.props.onClose }); if (this.props.renderInline) { return (n.createElement(o, { className: "_5t22" }, aa, ba)); } else return (n.createElement(q, { showCloseButton: false, className: "_5t22" }, aa, this.props.children, ba)); } }); f.exports = w; }, null);
__d('ShareDialog.react', ['Arbiter', 'BootloadedComponent.react', 'DialogExpansionAtWidth', 'DOM', 'FBID', 'immutable', 'Input', 'JSResource', 'LayerAutoFocus', 'LayerFadeOnHide', 'MercuryIDs', 'React', 'ReactDOM', 'ShareDialogAttachment.react', 'ShareDialogAttribution.react', 'ShareDialogAudience.react', 'ShareDialogAudienceHeader.react', 'ShareDialogDataSources', 'ShareDialogFooter.react', 'ShareDialogInput.react', 'ShareDialogMetricMixin', 'ShareDialogStaticTitle.react', 'ShareDialogStatusTypes', 'ShareDialogTaggerTypes', 'ShareDialogTagSummary.react', 'ShareDialogTitle.react', 'ShareDialogWarningNotice.react', 'ShareNowCounter', 'ShareNowCounterEvent', 'SharerType', 'XUIDialog.react', 'XUIDialogBody.react', 'XUINotice.react', 'XUISpinner.react', 'containsNode', 'cx', 'emptyFunction', 'fbt', 'MercuryThreads'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, aa, ba, ca, da, ea, fa, ga, ha, ia, ja, ka, la, ma, na, oa, pa, qa, ra, sa) { if (c.__markCompiled) c.__markCompiled(); var ta = c('MercuryThreads').get(), ua = w.TYPES, va = s.PropTypes, wa = 400, xa = s.createClass({ displayName: 'ShareDialog', mixins: [ba], propTypes: { postId: va.string.isRequired, shareType: va.string, privacySelector: va.any.isRequired, status: va.shape({ type: va.string.isRequired, title: va.oneOfType([va.string, va.object]), message: va.oneOfType([va.string, va.object]) }).isRequired, experiments: va.shape({ attachmentExpand: va.bool, enableVerbPrefetching: va.bool, postRetry: va.bool, staticHeader: va.bool, subtleWarning: va.bool }), userId: va.string.isRequired, appId: va.string, attachment: va.object, dataSources: va.instanceOf(y), legacyInput: va.any, messageTags: va.array, messageTargets: va.array, onCancel: va.func, onPost: va.func, ownerId: va.string, publicityWarning: va.object, sharerType: va.oneOf([ka.ALL_MODES, ka.MESSAGE_ONLY, ka.PAGE_ONLY, ka.PAGE_VIEWER]), showDoingNUX: va.bool, title: va.string, via: va.object, renderInline: va.bool, useCheckinBranding: va.bool, defaultAudienceType: va.oneOf(Object.keys(ua).map(function (ya) { return ua[ya]; })), initInputText: va.string, initInputRanges: va.array, placeholderText: va.string }, getDefaultProps: function () { return { onCancel: ra, onPost: ra, sharerType: ka.ALL_MODES, shown: false, status: { type: da.COMPOSING }, experiments: { attachmentExpand: false, postRetry: false, staticHeader: false }, renderInline: false, defaultAudienceType: ua.OWN }; }, getInitialState: function () { var ya = this.props.defaultAudienceType; if (this.props.sharerType === ka.MESSAGE_ONLY) { ya = ua.MESSAGE; } else if (this.props.sharerType === ka.PAGE_ONLY) ya = ua.PAGE; return { activeAudience: ya, activeTagger: ea.NONE, action: null, actorId: this.props.userId, audienceTargets: null, isPosting: false, message: '', object: null, people: [], place: null, shareType: this.props.shareType, status: this.props.status, via: this.props.via }; }, componentWillMount: function () { if (this.props.sharerType === ka.MESSAGE_ONLY) { ia.logEvent(ja.OPEN_MESSAGE_DIALOG); } else ia.logEvent(ja.OPEN_DIALOG); this._updateNubOffset(this.props.shareLinkNode); this.setState({ shown: true }); if (this.props.experiments.gkEnableVerbPrefetching) { var ya = y.getSource(y.ACTION); if (ya) { ya.bootstrapData.is_prefetching = true; ya.bootstrap(); ya.bootstrapData.is_prefetching = false; } } }, componentWillReceiveProps: function (ya) { this._updateNubOffset(ya.shareLinkNode); if (!ya.dataSources.getSource(y.TYPES.PERSON)) this.setState({ people: [] }); if (!ya.dataSources.getSource(y.TYPES.PLACE)) this.setState({ place: null }); if (!ya.dataSources.getSource(y.TYPES.ACTION) || !ya.dataSources.getSource(y.TYPES.OBJECT)) this.setState({ action: null, object: null }); this.setState({ shown: ya.shown, overflowing: this.refs.attachment && this.props.experiments.attachmentExpand ? t.findDOMNode(this.refs.attachment).clientHeight > wa : false, activeTagger: ea.NONE, status: ya.status }); }, componentDidMount: function () { this.reflowSubscription = h.subscribe('inlineShare/reflow', (function () { this._updateNubOffset(this.props.shareLinkNode); }).bind(this)); this.ogSubscription = h.subscribe('composer/ogCustomIconSelected', (function (event, za) { if (za.triggerElement && !pa(t.findDOMNode(this.refs.shareBody), za.triggerElement)) return; this.setState({ actionIconId: za.icon_id }); }).bind(this)); var ya = false; if (this.props.attachment && this.refs.attachment) { k.setContent(t.findDOMNode(this.refs.attachment), this.props.attachment); if (this.props.experiments.attachmentExpand) ya = t.findDOMNode(this.refs.attachment).clientHeight > wa; } this.setState({ loaded: true, overflowing: ya }); this.logLoadHeights(); }, componentWillUnmount: function () { if (this.reflowSubscription) this.reflowSubscription.unsubscribe(); if (this.ogSubscription) this.ogSubscription.unsubscribe(); }, componentDidUpdate: function (ya, za) { if (this.props.attachment && this.refs.attachment) k.setContent(t.findDOMNode(this.refs.attachment), this.props.attachment); this.refs.xuidialog && this.refs.xuidialog.layer.updatePosition(); }, _onTaggerClick: function (ya) { this.setState({ activeTagger: ya }); }, _onSelectPeople: function (ya) { this.setState({ people: ya }); }, _onSelectPlace: function (ya) { this.setState({ place: ya, activeTagger: ea.NONE }); }, _onSelectAction: function (ya) { this.setState({ action: ya }); }, _onSelectObject: function (ya) { var za = { object: ya, activeTagger: ea.NONE }; if (ya == null) za.actionIconId = null; this.setState(za); }, _onRemoveAttribution: function () { this.setState({ via: null }); }, _onAudienceSelect: function (ya) { if (ya === ua.GROUP || ya === ua.MESSAGE) { this.setState({ activeAudience: ya, activeTagger: ea.NONE, audienceTargets: null, actorId: this.props.userId, people: [], place: null, action: null, object: null }); } else this.setState({ activeAudience: ya, audienceTargets: null, actorId: this.props.userId }); }, _onChangeAudienceTargets: function (ya) { if (this.state.activeAudience === ua.PAGE) { this.setState({ audienceTargets: [ya[0].pageId], actorId: ya[0].actorId }); } else this.setState({ audienceTargets: ya, actorId: this.props.userId }); }, _onClearAudienceTargets: function () { this.setState({ audienceTargets: null }); }, _onBlur: function (ya) { this.setState({ message: ya }); }, _onExpand: function () { this.setState({ expanded: true }); }, _onCollapse: function () { this.setState({ expanded: false }); }, _getStatefulResponse: function () { var ya = this.state, za = ya.people.map(function (mb) { return mb.getUniqueID(); }), ab = null, bb = null; if (ya.object) { var cb = ya.object.getUniqueID(), db = ya.object.getTitle(); if (!cb || cb === db) { bb = db; } else ab = cb; } var eb = ya.message; if (this.props.legacyInput) { var fb = t.findDOMNode(this.refs.dialogInput), gb = k.find(fb, '.mentionsHidden'); eb = n.getValue(gb); } var hb = ya.audienceTargets ? ya.audienceTargets : [], ib = 0; if (hb.length === 1) { var jb = l.isUser(hb[0]) ? r.getThreadIDFromUserID(hb[0]) : r.getThreadIDFromThreadFBID(hb[0]), kb = ta.getThreadMetaNow(jb); ib = kb ? kb.ephemeral_ttl_mode : 0; } var lb = { appId: this.props.appId, sharedAdId: this.props.sharedAdId, actorId: this.state.actorId, ownerId: this.props.ownerId, postId: this.props.postId, shareType: this.props.shareType, message: eb, audienceType: ya.activeAudience, audienceTargets: hb, ephemeralTTLMode: ib, taggedPeople: za, taggedPlace: ya.place ? ya.place.getUniqueID() : null, taggedActionId: ya.action ? ya.action.getUniqueID() : null, taggedActionIconId: this.state.actionIconId, taggedObjectId: ab, taggedObjectStr: bb, attributionId: this.state.via ? this.state.via.id : null, messageTags: this.props.messageTags, internalExtra: this.props.internalExtra, internalPreviewImageID: this.props.internalPreviewImageID, source: this.props.renderInline ? 'osric-inline' : 'osric' }; if (this.state.activeAudience === ua.OWN && this.props.sharerType !== ka.PAGE_VIEWER) if (this.refs.footer) { lb.privacy = this.refs.footer.getPrivacyValue(); } else ia.logEvent(ja.NO_FOOTER_REF); return lb; }, _onCancel: function () { this.setState({ shown: false }); this.props.onCancel(this._getStatefulResponse()); if (this.props.logHeight) this.logCancelHeights(); }, _onPost: function () { this.props.onPost(this._getStatefulResponse()); this.setState({ isPosting: true }); if (this.props.logHeight) this.logPostHeights(); }, _onRetry: function () { this.setState({ isPosting: false, status: { type: da.COMPOSING, title: null, message: null } }); }, _getMessage: function () { var ya = null; if (this.state.status.type === da.ERROR) { ya = this.state.status.message || sa._("This post could not be shared at this time. Please try again later."); } else if (this.state.status.type === da.SUCCESS) ya = this.state.status.message || sa._("Your share was posted."); if (ya) { if (this.state.status.type === da.SUCCESS && !this.state.status.title) setTimeout((function () { this.setState({ shown: false }); }).bind(this), 2500); if (ya.__html) return s.createElement('span', { dangerouslySetInnerHTML: ya }); return s.createElement('span', null, ya); } return null; }, _getWarning: function () { var ya = s.createElement('noscript', null); if (this.props.publicityWarning) if (this.props.experiments && this.props.experiments.subtleWarning) { ya = s.createElement(ha, { warning: this.props.publicityWarning }); } else ya = s.createElement(na, { className: "_2nt0", size: 'small' }, s.createElement('span', { dangerouslySetInnerHTML: this.props.publicityWarning })); return ya; }, _getAttribution: function () { var ya = s.createElement('noscript', null); if (this.state.via && this.state.via.name && this.state.activeAudience !== ua.MESSAGE) ya = s.createElement(v, { onRemove: this._onRemoveAttribution, name: this.props.via.name }); return ya; }, _getOverlay: function () { var ya = s.createElement('noscript', null); if (this.state.status.type === da.POSTING) ya = s.createElement('div', { className: "_51jk" }, s.createElement(oa, { size: 'large', className: "_51jl" })); return ya; }, _getAttachment: function () { var ya = s.createElement('noscript', null); if (!this.props.renderInline) ya = s.createElement(u, { onCollapse: this._onCollapse, overflowing: this.state.overflowing, onExpand: this._onExpand }, s.createElement('article', { ref: 'attachment', className: "_51jo" })); return ya; }, render: function () { var ya; if (this.props.experiments.staticHeader) { ya = s.createElement(ca, { onClose: this._onCancel, renderInline: this.props.renderInline, title: this.props.title }); } else ya = s.createElement(ga, { activeAudience: this.state.activeAudience, dataSources: this.props.dataSources, onAudienceSelect: this._onAudienceSelect, onClose: this._onCancel, sharerType: this.props.sharerType, status: this.state.status, renderInline: this.props.renderInline }); var za = s.createElement(z, { activeAudience: this.state.activeAudience, activeTagger: this.state.activeTagger, audienceTargets: this.state.audienceTargets, dataSources: this.props.dataSources, experiments: this.props.experiments, hasDoing: this.state.action !== null && this.state.object !== null, hasPeople: this.state.people.length > 0, hasPlace: this.state.place !== null, onCancel: this._onCancel, onPost: this._onPost, onRetry: this._onRetry, onTaggerClick: this._onTaggerClick, privacySelector: this.props.privacySelector, ref: 'footer', status: this.state.status, sharerType: this.props.sharerType, showDoingNUX: this.props.showDoingNUX, renderInline: this.props.renderInline }); if (this.props.renderInline) { return (s.createElement('li', { className: "_2nt1" }, s.createElement('div', { className: "_2phu", style: { left: this.state.nubOffset } }), ya, this._getInlineBody(), za)); } else return (s.createElement(la, { ref: 'xuidialog', shown: this.state.shown, width: 496, behaviors: { DialogExpansion: j, LayerFadeOnHide: q, LayerAutoFocus: p }, layerHideOnBlur: false, modal: this.state.status.type !== da.SUCCESS, className: "_51jd" }, s.createElement('div', { ref: 'dialog' }, ya, this._getDialogBody(), za))); }, _updateNubOffset: function (ya) { if (!ya) return 0; var za = 12, ab = ya.offsetLeft, bb = ya.offsetWidth / 2, cb = 8, db = Math.round(za + ab + bb - cb); this.setState({ nubOffset: db }); }, _getInlineBody: function () { var ya = this._getMessage(); if (ya) return (s.createElement('div', { className: "_2pid _2pin", ref: 'message' }, ya)); return (s.createElement('div', { className: "_2nt2" }, this._getBodyContent())); }, _getDialogBody: function () { var ya = this._getMessage(); if (ya) return (s.createElement(ma, { ref: 'message' }, ya)); return (s.createElement(ma, { className: "_51jm" }, this._getBodyContent())); }, _getBodyContent: function () { var ya = this._getWarning(), za = this._getAttribution(), ab = this._getOverlay(), bb = this._getAttachment(), cb; if (this.props.experiments.staticHeader) cb = s.createElement(x, { activeAudience: this.state.activeAudience, dataSources: this.props.dataSources, onAudienceSelect: this._onAudienceSelect }); return (s.createElement('div', { ref: 'shareBody' }, cb, s.createElement(w, { userId: this.props.userId, activeAudience: this.state.activeAudience, messageTargets: this.props.messageTargets, dataSources: this.props.dataSources, onChange: this._onChangeAudienceTargets, onClear: this._onClearAudienceTargets }), s.createElement(aa, { activeAudience: this.state.activeAudience, className: "_2nt3 autofocus", dataSources: this.props.dataSources, initialValue: this.state.message, legacyInput: this.props.legacyInput, ref: 'dialogInput', onBlur: this._onBlur, initInputText: this.props.initInputText, initInputRanges: this.props.initInputRanges, placeholderText: this.props.placeholderText }), s.createElement(fa, { onIconChange: this._onIconChange, taggerData: m.Map({ action: this.state.action, actionIconID: this.state.actionIconId, object: this.state.object, people: this.state.people, place: this.state.place }) }), za, bb, ya, s.createElement(i, { bootloadLoader: o('ShareDialogTagger.react'), bootloadPlaceholder: s.createElement('span', null), activeTagger: this.state.activeTagger, dataSources: this.props.dataSources, experiments: this.props.experiments, initialPeople: this.state.people, initialPlace: this.state.place, initialAction: this.state.action, initialObject: this.state.object, onSelectPeople: this._onSelectPeople, onSelectPlace: this._onSelectPlace, onSelectAction: this._onSelectAction, onSelectObject: this._onSelectObject, userId: this.props.userId, useCheckinBranding: this.props.useCheckinBranding }), ab)); } }); f.exports = xa; }, null);
__d('ShareDialogPeopleTagger.react', ['cx', 'emptyFunction', 'fbt', 'React', 'Grid.react', 'XUITokenizer.react', 'ShareDialogTaggerPresenter'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n) { if (c.__markCompiled) c.__markCompiled(); var o = l.GridItem, p = k.PropTypes, q = k.createClass({ displayName: 'ShareDialogPeopleTagger', propTypes: { userId: p.string.isRequired, dataSource: p.object, initialPeople: p.array, onSelect: p.func }, getDefaultProps: function () { return { onSelect: i, initialPeople: [] }; }, getInitialState: function () { return { people: this.props.initialPeople }; }, componentWillReceiveProps: function (r) { if (r.initialPeople && this.props.initialPeople !== r.initialPeople) this.setState({ people: r.initialPeople }); }, _onAdd: function (r) { var s = this.state.people, t = r.getUniqueID(), u = s.some(function (v) { return v.getUniqueID() === t; }); if (u) { return; } else { s.push(r); this.setState({ people: s }); } this.props.onSelect(s); }, _onRemove: function (r) { var s = this.state.people, t = s.indexOf(r); if (t == -1) return; s.splice(t, 1); this.setState({ people: s }); this.props.onSelect(s); }, render: function () { var r = {}; r[this.props.userId] = true; return (k.createElement(l, { cols: 2, className: "_o2h _2rlv" }, k.createElement(o, { className: "_27tc", key: 'prefix' }, j._("With")), k.createElement(o, { className: "_2mzr", key: 'suffix' }, k.createElement(m, { presenter: n, focusedOnInit: true, excludedEntries: r, entries: this.state.people, className: "_2qvi _2qvj", placeholder: j._("Who are you with?"), searchSource: this.props.dataSource, onAddEntryAttempt: this._onAdd, onRemoveEntryAttempt: this._onRemove })))); } }); f.exports = q; }, null);
__d('ShareDialogPlaceTagger.react', ['cx', 'emptyFunction', 'fbt', 'React', 'Grid.react', 'XUITypeahead.react', 'ShareDialogTaggerPresenter'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n) { if (c.__markCompiled) c.__markCompiled(); var o = l.GridItem, p = k.PropTypes, q = k.createClass({ displayName: 'ShareDialogPlaceTagger', propTypes: { dataSource: p.object, initialPlace: p.object, onSelect: p.func, useCheckinBranding: p.bool }, getDefaultProps: function () { return { onSelect: i }; }, getInitialState: function () { return { place: this.props.initialPlace, query: this.props.initialPlace ? this.props.initialPlace.getTitle() : '' }; }, componentWillReceiveProps: function (r) { if (r.initialPlace && this.props.initialPlace !== r.initialPlace) this.setState({ place: r.initialPlace }); }, _onChange: function (event) { this.setState({ query: event.target.value }); }, _onSelect: function (r) { this.setState({ place: r, query: r.getTitle() }); this.props.onSelect(r); }, _onClear: function () { this.setState({ place: null, query: null }); this.props.onSelect(null); }, render: function () { return (k.createElement(l, { cols: 2, className: "_5d39 _2rlv _3iti" }, k.createElement(o, { className: "_27tc", key: 'prefix' }, j._("At")), k.createElement(o, { className: "_2mzr", key: 'suffix' }, k.createElement(m, { presenter: n, clearable: true, focusedOnInit: true, showEntriesOnFocus: true, selectedEntry: this.state.place, placeholder: this.props.useCheckinBranding ? j._("Where was this?") : j._("Where are you at?"), className: "_2qvi _2qvk", queryString: this.state.query, searchSource: this.props.dataSource, highlightOnSelect: true, onSelectAttempt: this._onSelect, onClear: this._onClear, onChange: this._onChange, tallInput: true })))); } }); f.exports = q; }, null);
__d('ShareDialogTagger.react', ['React', 'ShareDialogDataSources', 'ShareDialogTaggerTypes', 'ShareDialogPeopleTagger.react', 'ShareDialogPlaceTagger.react', 'ShareDialogActionTagger.react', 'ShareDialogObjectTagger.react', 'emptyFunction'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n, o) { if (c.__markCompiled) c.__markCompiled(); var p = h.PropTypes, q = h.createClass({ displayName: 'ShareDialogTagger', propTypes: { activeTagger: function (r) { if (!j.isValid(r.activeTagger)) return new Error('The active tagger is invalid.'); }, dataSources: p.instanceOf(i), experiments: p.shape({ enableVerbPrefetching: p.bool }), userId: p.string.isRequired, initialPeople: p.array, initialPlace: p.object, initialAction: p.object, initialObject: p.object, onSelectPeople: p.func, onSelectPlace: p.func, onSelectAction: p.func, onSelectObject: p.func, useCheckinBranding: p.bool }, getDefaultProps: function () { return { activeTagger: j.NONE, initialPeople: [], onClearAction: o, onSelectPeople: o, onSelectPlace: o, onSelectAction: o, onSelectObject: o }; }, getInitialState: function () { return { people: this.props.initialPeople, place: this.props.initialPlace, action: this.props.initialAction, object: this.props.initialObject }; }, componentDidUpdate: function () { if (this.refs.objectTagger) this.refs.objectTagger.focusInput(); }, componentWillReceiveProps: function (r) { this.setState({ people: r.initialPeople, place: r.initialPlace, action: r.initialAction, object: r.initialObject }); }, _onSelectPeople: function (r) { this.setState({ people: r }); this.props.onSelectPeople(r); }, _onSelectPlace: function (r) { this.setState({ place: r }); this.props.onSelectPlace(r); }, _onClearAction: function () { this.setState({ action: null }); }, _onSelectAction: function (r) { this.setState({ action: r }); this.props.onSelectAction(r); }, _onSelectObject: function (r) { this.setState({ object: r }); this.props.onSelectObject(r); }, render: function () { var r = this.props.dataSources; if (this.props.activeTagger === j.PEOPLE) { var s = r.getSource(i.TYPES.PERSON); if (!s) return h.createElement('noscript', null); return (h.createElement(k, { userId: this.props.userId, dataSource: s, initialPeople: this.state.people, onSelect: this._onSelectPeople })); } else if (this.props.activeTagger === j.PLACE) { var t = r.getSource(i.TYPES.PLACE); if (!t) return h.createElement('noscript', null); return (h.createElement(l, { dataSource: t, initialPlace: this.state.place, onSelect: this._onSelectPlace, useCheckinBranding: this.props.useCheckinBranding })); } else if (this.props.activeTagger === j.DOING) { var u = r.getSource(i.TYPES.ACTION), v = r.getSource(i.TYPES.OBJECT); if (!u || !v) return h.createElement('noscript', null); return (h.createElement('div', null, this.state.action ? h.createElement('noscript', null) : h.createElement(m, { dataSource: u, experiments: this.props.experiments, action: this.state.action, onSelect: this._onSelectAction }), this.state.action ? h.createElement(n, { ref: 'objectTagger', action: this.state.action, dataSource: v, object: this.state.object, onClearAction: this._onClearAction, onSelect: this._onSelectObject, userId: this.props.userId }) : h.createElement('noscript', null))); } return h.createElement('noscript', null); } }); f.exports = q; }, null);