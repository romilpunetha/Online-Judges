/*!CK:4039944479!*//*1453173838,*/

if (self.CavalryLogger) { CavalryLogger.start_js(["pXgWX"]); }

__d('ReactShareDialog.react', ['ShareDialogAudience.react', 'ReactShareDialogComposer.react', 'ShareDialogDataSources', 'ShareDialogTitle.react', 'ShareNowCounter', 'ShareNowCounterEvent', 'SharerType', 'AccessibleLayer', 'CurrentUser', 'DialogExpansionAtWidth', 'LayerFadeOnHide', 'LayerHideOnEscape', 'React', 'TooltipLink.react', 'XUIDialog.react', 'XUIDialogBody.react', 'XUIDialogCloseButton.react', 'XUIDialogFooter.react', 'XUIDialogTitle.react', 'XUISpinner.react', 'cx', 'emptyFunction', 'fbt'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, aa, ba, ca, da) { 'use strict'; if (c.__markCompiled) c.__markCompiled(); var ea = t.PropTypes, fa = t.createClass({ displayName: 'ReactShareDialog', propTypes: { experiments: ea.shape({ subtleWarning: ea.bool }), appId: ea.string, attachment: ea.object, causalElement: ea.instanceOf(HTMLElement), dataSources: ea.instanceOf(j), loggingConfig: ea.shape({ targetType: ea.string, ref: ea.string, composerVersion: ea.string.isRequired }).isRequired, messageTags: ea.array, messageTargets: ea.array, onCancel: ea.func.isRequired, onChangeAudienceTargets: ea.func.isRequired, onClearAudienceTargets: ea.func.isRequired, onPost: ea.func.isRequired, postId: ea.string.isRequired, privacySelector: ea.any.isRequired, publicityWarning: ea.object, sharerType: ea.oneOf([n.ALL_MODES, n.MESSAGE_ONLY, n.PAGE_ONLY, n.PAGE_VIEWER]), shareType: ea.string, showDoingNUX: ea.bool, status: ea.shape({ message: ea.oneOfType([ea.string, ea.object]), title: ea.oneOfType([ea.string, ea.object]), type: ea.string.isRequired }).isRequired, taggersConfig: ea.object.isRequired, useCheckinBranding: ea.bool, userId: ea.string.isRequired, via: ea.object }, getDefaultProps: function () { return { onCancel: ca, onPost: ca, onChangeAudienceTargets: ca, onClearAudienceTargets: ca, sharerType: n.ALL_MODES, status: { type: 'composing' } }; }, componentWillMount: function () { if (this.props.sharerType === n.MESSAGE_ONLY) { l.logEvent(m.OPEN_MESSAGE_DIALOG); } else l.logEvent(m.OPEN_DIALOG); }, _getMessage: function () { var ga = null; if (this.props.status.type === 'error') { ga = this.props.status.message || da._("This post could not be shared at this time. Please try again later."); } else if (this.props.status.type === 'success') ga = this.props.status.message || da._("Your share was posted."); if (ga) { var ha = typeof ga !== 'string' && ga.__html ? t.createElement('span', { dangerouslySetInnerHTML: ga }) : ga; return t.createElement(w, null, ha); } return null; }, _getOverlay: function () { var ga = t.createElement('noscript', null); if (this.props.status.type === 'posting') ga = t.createElement('div', { className: "_51jk" }, t.createElement(aa, { size: 'large', className: "_51jl" })); return ga; }, _getFooter: function () { if (this.props.status.type !== 'error' || this.props.renderInline) { return t.createElement('noscript', null); } else return (t.createElement(y, null, t.createElement(x, { use: 'confirm' }))); }, _getTitle: function () { if (!this.props.status.title || this.props.renderInline) { return t.createElement('noscript', null); } else { var ga = this.props.status.title, ha = typeof ga !== 'string' && ga.__html ? t.createElement('span', { dangerouslySetInnerHTML: ga }) : ga; return (t.createElement(z, null, ha)); } }, render: function () { var ga = p.isEmployee() ? t.createElement(u, { className: "_2jxp uiHelpLink", href: '/groups/761337780581506/', tooltip: 'Provide feedback on the React Share Composer (fb-only).', target: '_blank' }) : null, ha = this._getMessage() || [t.createElement(k, { key: 'title', activeAudience: this.props.activeAudience, dataSources: this.props.dataSources, onAudienceSelect: this.props.onTargetSelect, onClose: this.props.onCancel, renderInline: this.props.renderInline, sharerType: this.props.sharerType, status: this.props.status }, ga), t.createElement(h, { activeAudience: this.props.activeAudience, dataSources: this.props.dataSources, defaultPageTargetID: this.props.defaultPageTargetID, key: 'audience', messageTargets: this.props.messageTargets, onChange: this.props.onChangeAudienceTargets, onClear: this.props.onClearAudienceTargets, userId: this.props.userId }), t.createElement(i, babelHelpers._extends({ key: 'composer' }, this.props))]; return (t.createElement(v, { behaviors: { AccessibleLayer: o, DialogExpansion: q, LayerFadeOnHide: r, LayerHideOnEscape: s }, causalElementRef: (function () { return this.props.causalElement; }).bind(this), className: "_51jd", layerHideOnBlur: false, modal: true, shown: this.props.shown, width: 496 }, this._getTitle(), t.createElement('div', { ref: 'dialog' }, ha), this._getOverlay(), this._getFooter())); } }); f.exports = fa; }, null);
__d('ReactShareDialogContainer.react', ['ReactComposerContextMixin', 'ReactComposerPropsAndStoreBasedStateMixin', 'ReactComposerAudienceStore', 'ReactComposerStatusStore', 'ReactComposerTaggerStore', 'ReactComposerTaggerType', 'FBID', 'MercuryIDs', 'ReactShareDialogComposerActions', 'ReactShareDialogComposerStore', 'ShareDialogAudienceTypes', 'ReactShareDialog.react', 'ShareNowCounter', 'ShareNowCounterEvent', 'SharerType', 'ReactComponentWithPureRenderMixin', 'React', 'MercuryThreads'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x) { if (c.__markCompiled) c.__markCompiled(); var y = c('MercuryThreads').get(), z = x.createClass({ displayName: 'ReactShareDialogContainer', mixins: [w, h, i(q)], statics: { beforeCalculateInitialState: function (aa, ba) { var ca = ba.defaultAudience ? ba.defaultAudience : r.OWN; if (ba.sharerType === v.MESSAGE_ONLY) { ca = r.MESSAGE; } else if (ba.sharerType === v.PAGE_ONLY) ca = r.PAGE; p.setTarget(aa, ca); p.setTargetInfo(aa, { userId: ba.userId }); }, calculateState: function (aa, ba) { var ca = q.getTargetInfo(aa), da = ca.audienceTargets, ea = ca.userId; return { activeAudience: q.getTarget(aa), audienceTargets: da, userId: ea }; } }, getInitialState: function () { return { shown: true }; }, componentWillReceiveProps: function (aa) { if (aa.status.type === 'success' && this.state.shown) setTimeout((function () { return this.setState({ shown: false }); }).bind(this), 2500); }, render: function () { return (x.createElement(s, babelHelpers._extends({}, this.props, this.state, { onCancel: this._onCancel, onChangeAudienceTargets: this._onChangeAudienceTargets, onClearAudienceTargets: this._onClearAudienceTargets, onPost: this._onPost, onTargetSelect: this._onTargetSelect }))); }, _getStatefulResponse: function () { var aa = this.props.contextConfig.composerID, ba = l.getTaggersData(aa), ca = j.getAudience(aa), da = k.getMessage(aa), ea = q.getTarget(aa), fa = q.getTargetInfo(aa), ga = q.getTargetedPrivacyData(aa), ha = q.getAttribution(aa), ia = fa.audienceTargets ? fa.audienceTargets : [], ja = 0; if (ia.length === 1) { var ka = n.isUser(ia[0]) ? o.getThreadIDFromUserID(ia[0]) : o.getThreadIDFromThreadFBID(ia[0]), la = y.getThreadMetaNow(ka); ja = la ? la.ephemeral_ttl_mode : 0; } var ma = ba[m.PEOPLE], na = ba[m.LOCATION], oa = ba[m.ACTIVITY], pa = ma.map(function (va) { return va.getUniqueID(); }), qa = null, ra = null; if (oa.object) { var sa = oa.object.getUniqueID(), ta = oa.object.getTitle(); if (!sa || sa === ta) { ra = ta; } else qa = sa; } var ua = q.getShareDialogType(aa); return { actorId: fa.userId, appId: this.props.appId, attributionId: ha ? ha.id : null, audienceTargets: ia, audienceType: ea, ephemeralTTLMode: ja, internalExtra: this.props.internalExtra, internalPreviewImageID: this.props.internalPreviewImageID, isForcedReshareOfPost: ua, message: da, messageTags: this.props.messageTags, ownerId: this.props.ownerId, postId: this.props.postId, privacy: ca, sharedAdId: this.props.sharedAdId, shareType: this.props.shareType, source: 'osbach', taggedActionIconId: oa.actionIconID, taggedActionId: oa.action ? oa.action.getUniqueID() : null, taggedObjectId: qa, taggedObjectStr: ra, taggedPeople: pa, taggedPlace: na && na.place ? na.place.getUniqueID() : null, targetedPrivacyData: ga, url: this.props.url }; }, _onTargetSelect: function (aa) { p.setTarget(this.context.composerID, aa); p.setTargetInfo(this.context.composerID, { audienceTargets: null, userId: this.props.userId }); }, _onCancel: function () { t.logEvent(u.SHARE_CANCEL); this.setState({ shown: false }); this.props.onCancel && this.props.onCancel(this._getStatefulResponse()); }, _onChangeAudienceTargets: function (aa) { if (aa.length === 0) return; var ba = aa[0], ca = this.state.activeAudience === r.PAGE ? { audienceTargets: [ba.pageId], userId: ba.actorId } : { audienceTargets: aa, userId: this.props.userId }; p.setTargetInfo(this.context.composerID, ca); }, _onClearAudienceTargets: function () { p.setTargetInfo(this.context.composerID, { audienceTargets: null, userId: this.props.userId }); }, _onPost: function () { this.props.onPost(this._getStatefulResponse()); } }); f.exports = z; }, null);
__d('ReactShareDialogRoot.react', ['ReactComposerContextConfig', 'ReactComposerContextProviderMixin', 'ReactShareDialogContainer.react', 'ReactComponentWithPureRenderMixin', 'React'], function a(b, c, d, e, f, g, h, i, j, k, l) { if (c.__markCompiled) c.__markCompiled(); var m = l.createClass({ displayName: 'ReactShareDialogRoot', mixins: [k, i], propTypes: { contextConfig: h.isRequired }, render: function () { return l.createElement(j, this.props); } }); f.exports = m; }, null);
__d('ShareDialogOsbachController', ['ActorURI', 'AsyncRequest', 'AsyncResponse', 'ReactComposerActions', 'ComposerEntryPointRef', 'DOM', 'OnlyMeSharerSaveNux.react', 'React', 'ReactDOM', 'ShareDialogAudienceTypes', 'ShareDialogDataSources', 'ReactShareDialogRoot.react', 'ShareNowCounter', 'ShareNowCounterEvent', 'XShareDialogSubmitController', 'destroyOnUnload', 'getActiveElement', 'uniqueID'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y) { if (c.__markCompiled) c.__markCompiled(); var z, aa, ba, ca, da, ea, fa; function ga() { ka({ type: 'posting' }); } function ha(ma) { t.logEvent(u.SHARE_POST_SUCCESS); ka({ message: ma.payload.message, shareType: ma.payload.audience, showOnlyMeSharerSaveNux: ma.payload.showOnlyMeSharerSaveNux, type: 'success' }); } function ia(ma) { t.logEvent(u.SHARE_POST_ERROR); j.defaultErrorHandler(ma); ka({ type: 'composing' }); } function ja(ma) { if (ma.error) ka({ type: 'composing' }); } function ka(ma) { if (ma.showOnlyMeSharerSaveNux && ma.shareType && ca && da && ea) { p.render(o.createElement(n, { caretId: ca, storyContainerId: da, collectionId: ea, objectId: fa, shareType: ma.shareType }), aa); } else p.render(o.createElement(s, babelHelpers._extends({}, z, { contextConfig: { actorID: z.userId, composerID: ba, composerType: l.FEED_STORY, gks: z.gks, targetID: z.userId }, shown: true, onPost: function (na) { la.onPost(na, ga, ha, ia, ja); }, status: ma })), aa); } var la = { getPropsFromAsyncResponse: function (ma) { var na = ma.sources, oa = babelHelpers.objectWithoutProperties(ma, ['sources']), pa = na.person, qa = na.personTag, ra = na.personWall, sa = na.group, ta = na.page, ua = na.mentions, va = na.place, wa = na.action, xa = na.object, ya = new r().addSource(r.TYPES.ACTION, wa).addSource(r.TYPES.GROUP, sa).addSource(r.TYPES.MENTIONS, ua).addSource(r.TYPES.MESSAGE, pa).addSource(r.TYPES.OBJECT, xa).addSource(r.TYPES.PAGE, ta).addSource(r.TYPES.PERSON, qa).addSource(r.TYPES.PERSON_WALL, ra).addSource(r.TYPES.PLACE, va); return babelHelpers._extends({ dataSources: ya }, oa); }, onPost: function (ma, na, oa, pa, qa) { t.logEvent(u.SHARE_POST); if (ma.audienceType === q.OWN) { t.logEvent(u.SHARE_POST_OWN); } else if (ma.audienceType === q.PERSON) { t.logEvent(u.SHARE_POST_PERSON); } else if (ma.audienceType === q.PAGE) { t.logEvent(u.SHARE_POST_PAGE); } else if (ma.audienceType === q.GROUP) { t.logEvent(u.SHARE_POST_GROUP); } else if (ma.audienceType === q.MESSAGE) t.logEvent(u.SHARE_POST_MESSAGE); na && na(); var ra = v.getURIBuilder().setInt('app_id', ma.appId).setInt('attribution', ma.attributionId).setString('audience_type', ma.audienceType).setIntVector('audience_targets', ma.audienceTargets).setInt('ephemeral_ttl_mode', ma.ephemeralTTLMode).setStringToStringMap('internalextra', ma.internalExtra || z && z.internalExtra).setInt('internal_preview_image_id', ma.internalPreviewImageID).setBool('is_forced_reshare_of_post', ma.isForcedReshareOfPost).setString('message', ma.message).setStringVector('messaging_tags', ma.messageTags).setInt('owner_id', ma.ownerId).setInt('post_id', ma.postId).setString('privacy', ma.privacy).setInt('share_type', ma.shareType).setInt('shared_ad_id', ma.sharedAdId).setString('source', ma.source).setInt('tagged_action', ma.taggedActionId).setInt('tagged_object', ma.taggedObjectId).setString('tagged_object_str', ma.taggedObjectStr).setInt('tagged_action_icon', ma.taggedActionIconId).setIntVector('tagged_people', ma.taggedPeople).setInt('tagged_place', ma.taggedPlace).setHackType('targeted_privacy_data', ma.targetedPrivacyData).setString('url', ma.url).getURI(); ra = h.create(ra, ma.actorId); new i().setURI(ra).setMethod('POST').setReadOnly(true).setAllowCrossPageTransition(true).setHandler(function () { k.postSucceeded(ba); for (var sa = arguments.length, ta = Array(sa), ua = 0; ua < sa; ua++)ta[ua] = arguments[ua]; oa.apply(null, ta); }).setErrorHandler(pa).setFinallyHandler(qa).send(); }, setup: function (ma, na, oa, pa, qa, ra) { ma.causalElement = x(); z = la.getPropsFromAsyncResponse(ma); aa = na; ba = y(); ca = oa; da = pa; ea = qa; fa = ra; ka({ type: 'composing' }); w(function () { p.unmountComponentAtNode(aa); m.remove(aa); }); } }; f.exports = la; }, null);