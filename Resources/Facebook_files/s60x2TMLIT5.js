/*!CK:2255147818!*//*1452612688,*/

if (self.CavalryLogger) { CavalryLogger.start_js(["KQk8J"]); }

__d('FBConfirmDialog.react', ['React', 'XUIDialog.react', 'XUIDialogBody.react', 'XUIDialogFooter.react', 'XUIDialogButton.react', 'XUIDialogTitle.react', 'fbt'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n) { 'use strict'; if (c.__markCompiled) c.__markCompiled(); var o = h.PropTypes, p = h.createClass({ displayName: 'FBConfirmDialog', propTypes: babelHelpers._extends({}, i.propTypes, { title: o.node.isRequired, content: o.node.isRequired, onCancel: o.func.isRequired, onConfirm: o.func.isRequired, cancelButtonText: o.string, confirmButtonText: o.string }), getDefaultProps: function () { return { width: 400 }; }, render: function () { return (h.createElement(i, babelHelpers._extends({}, this.props, { modal: true }), h.createElement(m, null, this.props.title), h.createElement(j, null, this._getDialogContent()), h.createElement(k, null, this._getCancelButton(), this._getConfirmButton()))); }, _getDialogContent: function () { if (!this.props.shown) return null; return (h.createElement('div', null, this.props.content)); }, _getCancelButton: function () { return (h.createElement(l, { onClick: this.props.onCancel, label: this.props.cancelButtonText ? this.props.cancelButtonText : n._("Cancel") })); }, _getConfirmButton: function () { return (h.createElement(l, { action: 'confirm', use: 'confirm', onClick: this.props.onConfirm, label: this.props.confirmButtonText ? this.props.confirmButtonText : n._("Confirm") })); } }); f.exports = p; }, null);
__d('ReactComposerEditDialog.react', ['ReactComposerEvents', 'ReactComposerHandleUnsavedChanges', 'Arbiter', 'DialogExpansion', 'DOMContainer.react', 'FBConfirmDialog.react', 'LayerFadeOnShow', 'Map', 'ReactComponentWithPureRenderMixin', 'React', 'SubscriptionsHandler', 'XUICloseButton.react', 'XUIDialog.react', 'XUIDialogBody.react', 'XUIDialogTitle.react', 'cx', 'fbt', 'throttle'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y) { 'use strict'; if (c.__markCompiled) c.__markCompiled(); var z = q.PropTypes, aa = 500, ba = 500, ca = q.createClass({ displayName: 'ReactComposerEditDialog', _subscriptions: r, mixins: [p], propTypes: { composerDOM: z.any.isRequired, composerID: z.string.isRequired, onDismiss: z.func.isRequired }, getInitialState: function () { return { shown: true, showConfirmDialog: false }; }, componentWillMount: function () { this._subscriptions = new r(); this._subscriptions.addSubscriptions(j.subscribe(h.POST_SUCCEEDED + this.props.composerID, y(this._dismiss, ba))); }, componentWillUnmount: function () { this._subscriptions.release(); }, render: function () { var da = this.state.showConfirmDialog ? this._renderDismissConfirmation() : null; return (q.createElement('div', null, da, q.createElement(t, { behaviors: { DialogExpansion: k, LayerFadeOnShow: n }, className: "_51ly", shown: this.state.shown, width: aa, layerHideOnBlur: false }, q.createElement(v, { showCloseButton: false }, x._("Edit Post"), q.createElement(s, { className: "_51-t", label: x._("Close"), onClick: this._showConfirmDialog })), q.createElement(u, { className: "_51lz" }, q.createElement(l, null, this.props.composerDOM))))); }, _renderDismissConfirmation: function () { return (q.createElement(m, { content: i.getUnsavedChangesMessage(this.props.composerID), onCancel: this._cancelDismiss, onConfirm: this._dismiss, onToggle: this._cancelDismiss, shown: true, title: x._("Discard Changes"), cancelButtonText: x._("No"), confirmButtonText: x._("Discard Changes") })); }, _showConfirmDialog: function () { this.setState({ showConfirmDialog: true }); }, _cancelDismiss: function () { this.setState({ showConfirmDialog: false }); }, _dismiss: function () { this.setState({ shown: false, showConfirmDialog: false }); this.props.onDismiss && this.props.onDismiss(); } }); f.exports = ca; }, null);
__d('ReactComposerEditPostUtils', ['ReactComposerAsyncRequest', 'ReactComposerAttachmentStore', 'ReactComposerAttachmentType', 'ReactComposerPhotoStore', 'ReactComposerPhotoUploadStore', 'ReactComposerPostDataUtils', 'ReactComposerVideoUploadStore', 'invariant'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n, o) { if (c.__markCompiled) c.__markCompiled(); var p = { save: function (q) { !!!q.composerID ? o(0) : undefined; !!!q.contextInfo ? o(0) : undefined; !!!q.targetID ? o(0) : undefined; var r = q.composerID, s = i.getIsAttachmentSelected(r, j.MEDIA), t = m.getPostData(q), u = n.getVideo(r); if (s && !!u) { var v = n.getUploader(r); v && v.uploadFromFile(u.file, t); return; } var w = k.getPhotos(r), x = l.getUploads(r), y = x.filter(function (ba) { return w.some(function (ca) { return ca.id === ba.photoID; }); }); if (s && w.size > 0) Object.assign(t, m.getPhotoUploadsData(r, y)); var z = '/composer/edit/' + q.contextInfo.postID, aa = new h(q.composerID, z).setData(t).setHandler(q.onPostSuccess).setErrorHandler(q.onPostFailure); aa.send(); } }; f.exports = p; }, null);
__d('ReactComposerEditStore', ['ReactComposerActionStore', 'ReactComposerMediaConfig', 'ReactComposerEditPostUtils', 'ReactComposerPostUtils'], function a(b, c, d, e, f, g, h, i, j, k) { if (c.__markCompiled) c.__markCompiled(); var l, m; l = babelHelpers.inherits(n, h); m = l && l.prototype; function n() { 'use strict'; m.constructor.call(this); } n.prototype.__onPostStarted = function (o) { 'use strict'; j.save({ actorID: o.actorID, composerID: o.composerID, contextInfo: o.config.contextInfo, targetID: o.targetID }); }; n.prototype.__canPost = function (o) { 'use strict'; return !k.isPostButtonDisabled(o.composerID, i.photo.limit); }; f.exports = new n(); }, null);
__d('ReactComposerEditMediaSaveButtonContainer.react', ['ReactComposerContextMixin', 'ReactComposerEditStore', 'ReactComposerPostButtonContainerMixin', 'React', 'fbt'], function a(b, c, d, e, f, g, h, i, j, k, l) { if (c.__markCompiled) c.__markCompiled(); var m = k.PropTypes, n = k.createClass({ displayName: 'ReactComposerEditMediaSaveButtonContainer', mixins: [h, j], propTypes: { label: m.string }, getDefaultProps: function () { return { label: l._("Save") }; }, componentDidMount: function () { i.registerComposerID(this.context.composerID); } }); f.exports = n; }, null);
__d('ReactComposerEditSaveButtonContainer.react', ['ReactComposerContextMixin', 'ReactComposerPostButtonContainerMixin', 'ReactComposerEditStore', 'React', 'fbt'], function a(b, c, d, e, f, g, h, i, j, k, l) { if (c.__markCompiled) c.__markCompiled(); var m = k.PropTypes, n = k.createClass({ displayName: 'ReactComposerEditSaveButtonContainer', mixins: [h, i], propTypes: { label: m.string }, getDefaultProps: function () { return { label: l._("Save") }; }, componentDidMount: function () { j.registerComposerID(this.context.composerID); } }); f.exports = n; }, null);
__d('ReactComposerPrefillActions', ['ReactComposerDispatcher', 'ReactComposerPrefillActionTypes', 'ReactComposerPrefillConfig', 'ReactComposerPrefillStore'], function a(b, c, d, e, f, g, h, i, j) { if (c.__markCompiled) c.__markCompiled(); c('ReactComposerPrefillStore'); var k = { setPrefillData: function (l, m) { h.dispatch({ composerID: l, type: i.SET_PREFILL_DATA, prefillConfig: m }); } }; f.exports = k; }, null);
__d('ReactEditComposer.react', ['ReactComposer.react', 'ReactComposerAttachmentActions', 'ReactComposerAttachmentType', 'ReactComposerBodyContainer.react', 'ReactComposerConfig', 'ReactComposerContextConfig', 'ReactComposerContextProviderMixin', 'ReactComposerEditMediaSaveButtonContainer.react', 'ReactComposerEditSaveButtonContainer.react', 'ReactComposerEvents', 'ReactComposerMediaEagerAttachment.react', 'ReactComposerPrefillConfig', 'ReactComposerPrefillActions', 'ReactComposerStatusEagerAttachment.react', 'Arbiter', 'React', 'cx'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x) { if (c.__markCompiled) c.__markCompiled(); var y = w.createClass({ displayName: 'ReactEditComposer', mixins: [n], propTypes: { contextConfig: m.isRequired, config: l.isRequired, prefillConfig: s.isRequired }, componentWillMount: function () { t.setPrefillData(this.props.contextConfig.composerID, this.props.prefillConfig); }, componentDidMount: function () { var z = this.props.prefillConfig; if (z && z.selectedAttachment) { i.selectAttachment(this.props.contextConfig.composerID, z.selectedAttachment, z.shouldActivateSelectedAttachment); if (z.shouldActivateSelectedAttachment) v.inform(q.ACTIVATE_ATTACHMENT + this.props.contextConfig.composerID); } }, render: function () { var z = this.props.prefillConfig.selectedAttachment, aa = this._getAttachments(z); return (w.createElement(h, { className: "_1nby", loggingConfig: this.props.config.loggingConfig }, w.createElement(k, { expanded: this.props.config.showExpandedComposer }, aa))); }, _getAttachments: function (z) { var aa = []; aa.push(w.createElement(u, { config: this.props.config, key: 'status', prefillConfig: this.props.prefillConfig, postButtonModule: p, selected: z === j.STATUS, scrapeLinkOnInit: false })); aa.push(w.createElement(r, { key: 'media', config: this.props.config, prefillConfig: this.props.prefillConfig, postButtonModule: o, selected: z === j.MEDIA })); return aa; } }); f.exports = y; }, null);
__d('ReactEditComposerInit', ['ReactComposerEditDialog.react', 'ReactComposerInit', 'ReactEditComposer.react', 'DOM', 'Map', 'React', 'ReactDOM', 'Run'], function a(b, c, d, e, f, g, h, i, j, k, l, m, n, o) { 'use strict'; if (c.__markCompiled) c.__markCompiled(); var p = { _composerDOM: null, _mountContainer: null, init: function (q) { this._composerDOM = k.create('div'); this._mountContainer = k.create('div'); i.init(j, q, this._composerDOM); n.render(m.createElement(h, { composerDOM: this._composerDOM, composerID: q.contextConfig.composerID, onDismiss: this._cleanup.bind(this) }), this._mountContainer); k.appendContent(document.body, this._mountContainer); o.onUnload(this._cleanup.bind(this)); o.onLeave(this._cleanup.bind(this)); }, _cleanup: function () { setTimeout((function () { this._composerDOM && n.unmountComponentAtNode(this._composerDOM); this._mountContainer && n.unmountComponentAtNode(this._mountContainer); }).bind(this), 0); } }; f.exports = p; }, null);